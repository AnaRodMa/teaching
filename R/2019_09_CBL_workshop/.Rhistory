estimate_link()
#' @keywords internal
.estimate_response_init <- function(model, data, transform, random, length, preserve_range, predict, ...){
# Data
if (is.null(data)) {
data <- insight::get_data(model)
} else if (!is.data.frame(data)) {
if (data == "grid") {
data <- visualisation_matrix(model, random = random, length = length, preserve_range = preserve_range, reference = insight::get_data(model), ...)
} else {
stop('The `data` argument must either NULL, "grid" or another data.frame.')
}
}
data <- data[names(data) %in% insight::find_predictors(model, effects = "all", flatten = TRUE)]
# Deal with random
if (insight::model_info(model)$is_mixed & random) {
if (!insight::find_random(model, flatten = TRUE) %in% names(data)) {
warning("Could not find random effects in data. Will turn `random` to FALSE.")
random <- FALSE
}
}
if (random == TRUE) {
re.form <- NULL
} else if (random == FALSE) {
re.form <- NA
}
# Generate draws
if (predict == "link") {
if (transform == "response") {
transform <- TRUE
} else {
transform <- FALSE
}
interval <- "prediction"
} else{
interval <- "confidence"
}
list(data = data, re.form = re.form, transfom = transform, interval = interval)
}
data = NULL
transform = "response"
random = FALSE
length = 25
preserve_range = TRUE
predict = "response"
ci = 0.95
args <- .estimate_response_init(model, data, transform, random, length, preserve_range, predict)
data <- args$data
predict(model,
newdata = args$data,
re.form = args$re.form,
transfom = args$transfom,
interval = args$interval,
level = ci)
predict(model,
newdata = args$data,
re.form = args$re.form,
transfom = args$transfom,
interval = args$interval,
level = ci)
predict(model,
newdata = args$data,
re.form = args$re.form,
# transfom = args$transfom,
# interval = args$interval,
type = predict,
level = ci)
# Summary
predict(model,
newdata = args$data,
re.form = args$re.form)
predict(model,
newdata = args$data,
re.form = args$re.form)
confint(predict(model,
newdata = args$data,
re.form = args$re.form))
install.packages("merTools")
merTools::predictInterval(model
newdata = args$data,
level = ci)
merTools::predictInterval(model,
newdata = args$data,
level = ci)
args$transfom
model <- lmer(Sepal.Width ~ Petal.Length + (1 | Species), data = iris)
estimate_response(model)
"merMod" %in% class(model)
class(model)
args$transfom
args$transfom == "response" && !insight::model_info(model)$is_linear
args$interval
head(df)
head(data)
f
setwd("C:/Users/Dom/Dropbox/ENSEIGNEMENT/teaching/R/2019_09_CBL_workshop")
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE)
library(emo)
# Chunk 5
# Load the package
library(tidyverse)
# Chunk 7
df <- read.csv("materials/emotion.csv")
# Chunk 8
df <- read.csv("materials/emotion.csv", stringsAsFactors = FALSE)
# Chunk 9
df
# Chunk 10
library(easystats)
# Chunk 11
report(df)
# Chunk 12
report_participants(df, age = "Participant_Age",
sex = "Participant_Sex",
participant = "Participant_ID")
# Chunk 13
df_condition <- df %>%
group_by(Participant_ID, Emotion_Condition) %>%
summarise(Arousal = mean(Subjective_Arousal),
Autobio = mean(Autobiographical_Link),
Sex = unique(Participant_Sex))
# Chunk 14
head(df_condition)
# Chunk 15
df_sub <- df_condition %>%
pivot_wider(names_from = "Emotion_Condition",
values_from = c("Arousal", "Autobio"))
df_sub
# Chunk 16
df_sub$Arousal_Negative
median(df_sub$Arousal_Negative)
median(df_sub$Arousal_Neutral)
# Chunk 17
t.test(df_sub$Arousal_Negative, df_sub$Arousal_Neutral)
# Chunk 18
t.test(df_sub$Arousal_Negative, df_sub$Arousal_Neutral) %>%
report()
# Chunk 19
cor.test(df_sub$Autobio_Negative, df_sub$Arousal_Negative)
# Chunk 20
p <- df_sub %>%
ggplot(aes(x = Autobio_Negative, y = Arousal_Negative)) +
geom_point() +
geom_smooth(method = "lm")
p
# Chunk 22
df_sub$Autobio_Binary <- ifelse(
df_sub$Autobio_Negative > mean(df_sub$Autobio_Negative),
"High", "Low")
# Chunk 23
report(df_sub$Autobio_Binary)
# Chunk 24
model <- aov(Arousal_Negative ~ Sex * Autobio_Binary, data = df_sub)
# Chunk 25
result <- report(model)
to_table(result)
# Chunk 26
df_sub %>%
ggplot(aes(x = Sex, y = Autobio_Binary, fill = Arousal_Negative)) +
geom_boxplot()
# Chunk 27
model <- aov(Arousal_Negative ~ Sex * Autobio_Binary, data = df_sub)
# Chunk 28
model <- lm(Arousal_Negative ~ Sex * Autobio_Binary, data = df_sub)
# Chunk 29
result <- report(model)
to_table(result)
result
# Chunk 30
model <- lm(Arousal_Negative ~ Sex * Autobio_Negative, data = df_sub)
model %>%
report() %>%
to_table()
# Chunk 31
model %>%
estimate_link() %>%
ggplot(aes(y = Predicted, x = Autobio_Negative)) +
geom_ribbon(aes(ymin=CI_low, ymax=CI_high, fill=Sex), alpha = 0.3) +
geom_line(aes(color = Sex))
ylab("Predicted Arousal")
# Chunk 32
model %>%
estimate_link() %>%
ggplot(aes(y = Predicted, x = Autobio_Negative)) +
geom_ribbon(aes(ymin=CI_low, ymax=CI_high, fill=Sex), alpha = 0.3) +
geom_line(aes(color = Sex)) +
ylab("Predicted Arousal") +
geom_point(data = df_sub, aes(y = Arousal_Negative, color = Sex))
# Chunk 33
lm(Arousal ~ Emotion_Condition * Autobio, data = df_condition) %>%
report() %>%
to_table()
# Chunk 34
library(lme4)
model <- lmer(Arousal ~ Emotion_Condition * Autobio + (1|Participant_ID), data = df_condition)
model %>%
report() %>%
to_table()
head(df)
summary(df)
report(df)
setwd("C:/Users/Dom/Dropbox/ENSEIGNEMENT/teaching/R/2019_09_CBL_workshop")
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE)
library(emo)
# Chunk 5
# Load the package
library(tidyverse)
# Chunk 7
df <- read.csv("materials/emotion.csv")
# Chunk 8
df <- read.csv("materials/emotion.csv", stringsAsFactors = FALSE)
# Chunk 9
df
# Chunk 10
library(easystats)
# Chunk 11
report(df)
# Chunk 12
report_participants(df, age = "Participant_Age",
sex = "Participant_Sex",
participant = "Participant_ID")
# Chunk 13
df_condition <- df %>%
group_by(Participant_ID, Emotion_Condition) %>%
summarise(Arousal = mean(Subjective_Arousal),
Autobio = mean(Autobiographical_Link),
Sex = unique(Participant_Sex))
# Chunk 14
head(df_condition)
# Chunk 15
df_sub <- df_condition %>%
pivot_wider(names_from = "Emotion_Condition",
values_from = c("Arousal", "Autobio"))
df_sub
# Chunk 16
df_sub$Arousal_Negative
median(df_sub$Arousal_Negative)
median(df_sub$Arousal_Neutral)
# Chunk 17
t.test(df_sub$Arousal_Negative, df_sub$Arousal_Neutral)
# Chunk 18
t.test(df_sub$Arousal_Negative, df_sub$Arousal_Neutral) %>%
report()
# Chunk 19
cor.test(df_sub$Autobio_Negative, df_sub$Arousal_Negative)
# Chunk 20
p <- df_sub %>%
ggplot(aes(x = Autobio_Negative, y = Arousal_Negative)) +
geom_point() +
geom_smooth(method = "lm")
p
# Chunk 22
df_sub$Autobio_Binary <- ifelse(
df_sub$Autobio_Negative > mean(df_sub$Autobio_Negative),
"High", "Low")
# Chunk 23
report(df_sub$Autobio_Binary)
# Chunk 24
model <- aov(Arousal_Negative ~ Sex * Autobio_Binary, data = df_sub)
# Chunk 25
result <- report(model)
to_table(result)
# Chunk 26
df_sub %>%
ggplot(aes(x = Sex, y = Autobio_Binary, fill = Arousal_Negative)) +
geom_boxplot()
# Chunk 27
model <- aov(Arousal_Negative ~ Sex * Autobio_Binary, data = df_sub)
# Chunk 28
model <- lm(Arousal_Negative ~ Sex * Autobio_Binary, data = df_sub)
# Chunk 29
result <- report(model)
to_table(result)
result
# Chunk 30
model <- lm(Arousal_Negative ~ Sex * Autobio_Negative, data = df_sub)
model %>%
report() %>%
to_table()
# Chunk 31
model %>%
estimate_link() %>%
ggplot(aes(y = Predicted, x = Autobio_Negative)) +
geom_ribbon(aes(ymin=CI_low, ymax=CI_high, fill=Sex), alpha = 0.3) +
geom_line(aes(color = Sex))
ylab("Predicted Arousal")
# Chunk 32
model %>%
estimate_link() %>%
ggplot(aes(y = Predicted, x = Autobio_Negative)) +
geom_ribbon(aes(ymin=CI_low, ymax=CI_high, fill=Sex), alpha = 0.3) +
geom_line(aes(color = Sex)) +
ylab("Predicted Arousal") +
geom_point(data = df_sub, aes(y = Arousal_Negative, color = Sex))
# Chunk 33
lm(Arousal ~ Emotion_Condition * Autobio, data = df_condition) %>%
report() %>%
to_table()
# Chunk 34
library(lme4)
model <- lmer(Arousal ~ Emotion_Condition * Autobio + (1|Participant_ID), data = df_condition)
model %>%
report() %>%
to_table()
report(df)
model <- glmer(Recall ~ Emotion_Condition * Autobio +
(1|Particiapant_ID) + (1|Item_Name), data = df)
model <- glmer(Recall ~ Emotion_Condition * Autobio +
(1|Particiapant_ID) + (1|Item_Name), family = "logit", data = df)
model <- glmer(Recall ~ Emotion_Condition * Autobio +
(1|Particiapant_ID) + (1|Item_Name), family = "binomial", data = df)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE)
library(emo)
# Chunk 5
# Load the package
library(tidyverse)
# Chunk 7
df <- read.csv("materials/emotion.csv")
# Chunk 8
df <- read.csv("materials/emotion.csv", stringsAsFactors = FALSE)
# Chunk 9
df
# Chunk 10
library(easystats)
# Chunk 11
report(df)
# Chunk 12
report_participants(df, age = "Age",
sex = "Sex",
participant = "Participant_ID")
# Chunk 13
df_condition <- df %>%
group_by(Participant_ID, Condition) %>%
summarise(Arousal = mean(Arousal),
SelfRelevance = mean(SelfRelevance),
Sex = unique(Sex))
# Chunk 14
head(df_condition)
# Chunk 15
df_sub <- df_condition %>%
pivot_wider(names_from = "Condition",
values_from = c("Arousal", "SelfRelevance"))
df_sub
# Chunk 16
df_sub$Arousal_Negative
median(df_sub$Arousal_Negative)
median(df_sub$Arousal_Neutral)
# Chunk 17
t.test(df_sub$Arousal_Negative, df_sub$Arousal_Neutral)
# Chunk 18
t.test(df_sub$Arousal_Negative, df_sub$Arousal_Neutral) %>%
report()
# Chunk 19
cor.test(df_sub$SelfRelevance_Negative, df_sub$Arousal_Negative)
# Chunk 20
p <- df_sub %>%
ggplot(aes(x = SelfRelevance_Negative, y = Arousal_Negative)) +
geom_point() +
geom_smooth(method = "lm")
p
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE)
library(emo)
# Chunk 5
# Load the package
library(tidyverse)
# Chunk 7
df <- read.csv("materials/emotion.csv")
# Chunk 8
df <- read.csv("materials/emotion.csv", stringsAsFactors = FALSE)
# Chunk 9
df
# Chunk 10
library(easystats)
# Chunk 11
report(df)
# Chunk 12
report_participants(df, age = "Age",
sex = "Sex",
participant = "Participant_ID")
# Chunk 13
df_condition <- df %>%
group_by(Participant_ID, Condition) %>%
summarise(Arousal = mean(Arousal),
SelfRelevance = mean(SelfRelevance),
Sex = unique(Sex))
# Chunk 14
head(df_condition)
# Chunk 15
df_sub <- df_condition %>%
pivot_wider(names_from = "Condition",
values_from = c("Arousal", "SelfRelevance"))
df_sub
# Chunk 16
df_sub$Arousal_Negative
median(df_sub$Arousal_Negative)
median(df_sub$Arousal_Neutral)
# Chunk 17
t.test(df_sub$Arousal_Negative, df_sub$Arousal_Neutral)
# Chunk 18
t.test(df_sub$Arousal_Negative, df_sub$Arousal_Neutral) %>%
report()
# Chunk 19
cor.test(df_sub$SelfRelevance_Negative, df_sub$Arousal_Negative)
# Chunk 20
p <- df_sub %>%
ggplot(aes(x = SelfRelevance_Negative, y = Arousal_Negative)) +
geom_point() +
geom_smooth(method = "lm")
p
# Chunk 22
df_sub$SelfRelevance_Binary <- ifelse(
df_sub$SelfRelevance_Negative > mean(df_sub$SelfRelevance_Negative),
"High", "Low")
# Chunk 23
report(df_sub$SelfRelevance_Binary)
# Chunk 24
model <- aov(Arousal_Negative ~ Sex * SelfRelevance_Binary, data = df_sub)
# Chunk 25
result <- report(model)
to_table(result)
# Chunk 26
df_sub %>%
ggplot(aes(x = Sex, y = SelfRelevance_Binary, fill = Arousal_Negative)) +
geom_boxplot()
# Chunk 27
model <- aov(Arousal_Negative ~ Sex * SelfRelevance_Binary, data = df_sub)
# Chunk 28
model <- lm(Arousal_Negative ~ Sex * SelfRelevance_Binary, data = df_sub)
# Chunk 29
result <- report(model)
to_table(result)
result
# Chunk 30
model <- lm(Arousal_Negative ~ Sex * SelfRelevance_Negative, data = df_sub)
model %>%
report() %>%
to_table()
# Chunk 31
model %>%
estimate_link() %>%
ggplot(aes(y = Predicted, x = SelfRelevance_Negative)) +
geom_ribbon(aes(ymin=CI_low, ymax=CI_high, fill=Sex), alpha = 0.3) +
geom_line(aes(color = Sex))
ylab("Predicted Arousal")
# Chunk 32
model %>%
estimate_link() %>%
ggplot(aes(y = Predicted, x = SelfRelevance_Negative)) +
geom_ribbon(aes(ymin=CI_low, ymax=CI_high, fill=Sex), alpha = 0.3) +
geom_line(aes(color = Sex)) +
ylab("Predicted Arousal") +
geom_point(data = df_sub, aes(y = Arousal_Negative, color = Sex))
# Chunk 33
lm(Arousal ~ Condition * SelfRelevance, data = df_condition) %>%
report() %>%
to_table()
# Chunk 34
library(lme4)
model <- lmer(Arousal ~ Condition * SelfRelevance + (1|Participant_ID), data = df_condition)
model %>%
report() %>%
to_table()
# Chunk 35
report(df)
model <- glmer(Recall ~ Condition * SelfRelevance +
(1|Participant_ID) + (1|Item_Name), family = "binomial", data = df)
report(model)
report(model) %>%
to_table()
model <- glmer(Recall ~ Condition * SelfRelevance +
(1|Participant_ID) + (1|Item_Name), family = "binomial", data = standardize(df))
report(model) %>%
to_table()
model <- glmer(Recall ~ Condition * SelfRelevance +
(1|Participant_ID) + (1|Item_Name), family = "binomial", data = df)
report(model) %>%
to_table()
model <- stan_glmer(Recall ~ Condition * SelfRelevance +
(1|Participant_ID) + (1|Item_Name), family = "binomial", data = df)
library(rstanarm)
model <- stan_glmer(Recall ~ Condition * SelfRelevance +
(1|Participant_ID) + (1|Item_Name), family = "binomial", data = df)
report(model) %>%
to_table()
model %>%
estimate_link()
model %>%
estimate_link() %>%
ggplot(aes(x = SelfRelevance, y = Median)) +
geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill = Condition)) +
geom_line(aes(color = Condition))
model %>%
estimate_link() %>%
ggplot(aes(x = SelfRelevance, y = Median)) +
geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill = Condition), alpha = 0.2) +
geom_line(aes(color = Condition))
model %>%
estimate_link() %>%
ggplot(aes(x = SelfRelevance, y = Median)) +
geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill = Condition), alpha = 0.2) +
geom_line(aes(color = Condition))  +
theme_modern()
model %>%
estimate_link() %>%
ggplot(aes(x = SelfRelevance, y = Median)) +
geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill = Condition), alpha = 0.2) +
geom_line(aes(color = Condition), size = 1)  +
theme_modern()
